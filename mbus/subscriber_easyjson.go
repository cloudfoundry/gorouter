// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package mbus

import (
	route "code.cloudfoundry.org/gorouter/route"
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson639f989aDecodeCodeCloudfoundryOrgGorouterMbus(in *jlexer.Lexer, out *RegistryMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "port":
			out.Port = uint16(in.Uint16())
		case "uris":
			if in.IsNull() {
				in.Skip()
				out.Uris = nil
			} else {
				in.Delim('[')
				if out.Uris == nil {
					if !in.IsDelim(']') {
						out.Uris = make([]route.Uri, 0, 4)
					} else {
						out.Uris = []route.Uri{}
					}
				} else {
					out.Uris = (out.Uris)[:0]
				}
				for !in.IsDelim(']') {
					var v1 route.Uri
					v1 = route.Uri(in.String())
					out.Uris = append(out.Uris, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.Tags)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "app":
			out.App = string(in.String())
		case "stale_threshold_in_seconds":
			out.StaleThresholdInSeconds = int(in.Int())
		case "route_service_url":
			out.RouteServiceURL = string(in.String())
		case "private_instance_id":
			out.PrivateInstanceID = string(in.String())
		case "private_instance_index":
			out.PrivateInstanceIndex = string(in.String())
		case "isolation_segment":
			out.IsolationSegment = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson639f989aEncodeCodeCloudfoundryOrgGorouterMbus(out *jwriter.Writer, in RegistryMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"host\":")
	out.String(string(in.Host))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"port\":")
	out.Uint16(uint16(in.Port))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"uris\":")
	if in.Uris == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v3, v4 := range in.Uris {
			if v3 > 0 {
				out.RawByte(',')
			}
			out.String(string(v4))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"tags\":")
	if in.Tags == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v5First := true
		for v5Name, v5Value := range in.Tags {
			if !v5First {
				out.RawByte(',')
			}
			v5First = false
			out.String(string(v5Name))
			out.RawByte(':')
			out.String(string(v5Value))
		}
		out.RawByte('}')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"app\":")
	out.String(string(in.App))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"stale_threshold_in_seconds\":")
	out.Int(int(in.StaleThresholdInSeconds))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"route_service_url\":")
	out.String(string(in.RouteServiceURL))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"private_instance_id\":")
	out.String(string(in.PrivateInstanceID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"private_instance_index\":")
	out.String(string(in.PrivateInstanceIndex))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"isolation_segment\":")
	out.String(string(in.IsolationSegment))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RegistryMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson639f989aEncodeCodeCloudfoundryOrgGorouterMbus(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RegistryMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson639f989aEncodeCodeCloudfoundryOrgGorouterMbus(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RegistryMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson639f989aDecodeCodeCloudfoundryOrgGorouterMbus(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RegistryMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson639f989aDecodeCodeCloudfoundryOrgGorouterMbus(l, v)
}
